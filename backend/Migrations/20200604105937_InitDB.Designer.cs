// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VyShare;

namespace VyShare.Migrations
{
    [DbContext(typeof(VyShareContext))]
    [Migration("20200604105937_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4");

            modelBuilder.Entity("VyShare.Models.BasicTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EndPoint")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Seat")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartPoint")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TicketHolderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("TicketHolderId");

                    b.ToTable("BasicTickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8c6424d-b1e6-4d8e-8197-6830bbe4caa6"),
                            EndPoint = "Grønnåsen Skole",
                            OrderId = new Guid("281f253d-589e-45de-a54f-76fbc5c26706"),
                            Price = 412m,
                            ReferenceCode = "YXHA5",
                            Seat = "13A",
                            StartPoint = "Volda",
                            TicketHolderId = new Guid("dcc5e755-35f9-4b7c-b17a-53823509293c"),
                            Type = "Honnør"
                        },
                        new
                        {
                            Id = new Guid("ef87e729-d5b9-4a6d-a916-741499101af0"),
                            EndPoint = "Grønnåsen Skole",
                            OrderId = new Guid("281f253d-589e-45de-a54f-76fbc5c26706"),
                            Price = 375m,
                            ReferenceCode = "YXHBA6",
                            Seat = "13B",
                            StartPoint = "Volda",
                            TicketHolderId = new Guid("e0eb2039-85b7-49a1-b20d-1ab15312ba11"),
                            Type = "Student"
                        },
                        new
                        {
                            Id = new Guid("8060566d-22ba-47f1-a67f-aee1653e0488"),
                            EndPoint = "Ullevål stadion",
                            OrderId = new Guid("2d2d8c65-7390-452a-b76e-aaf663ff3076"),
                            Price = 199m,
                            ReferenceCode = "OPS34",
                            Seat = "03A",
                            StartPoint = "Sandefjord",
                            TicketHolderId = new Guid("eba9dcf6-a561-4817-a314-6bfce0c56888"),
                            Type = "Student"
                        },
                        new
                        {
                            Id = new Guid("4abb8b6c-f3a2-4440-a27b-71e5e801cb22"),
                            EndPoint = "Ullevål stadion",
                            OrderId = new Guid("2d2d8c65-7390-452a-b76e-aaf663ff3076"),
                            Price = 199m,
                            ReferenceCode = "PSD33",
                            Seat = "03B",
                            StartPoint = "Sandefjord",
                            TicketHolderId = new Guid("ff8754e4-3cff-43a0-8301-245028613ad4"),
                            Type = "Student"
                        },
                        new
                        {
                            Id = new Guid("6963b6b7-e334-44be-ae25-3c9f1038ecb6"),
                            EndPoint = "Ullevål stadion",
                            OrderId = new Guid("2d2d8c65-7390-452a-b76e-aaf663ff3076"),
                            Price = 219m,
                            ReferenceCode = "QSO20",
                            Seat = "03C",
                            StartPoint = "Larvik",
                            TicketHolderId = new Guid("c593f031-a50e-4347-9776-32a99880ba3b"),
                            Type = "Student"
                        },
                        new
                        {
                            Id = new Guid("42acda43-9601-4b98-839c-5ecc9838ceb7"),
                            EndPoint = "Gol",
                            OrderId = new Guid("41e00ed5-bdd0-49b1-bb4c-640a9c0c59ae"),
                            Price = 320m,
                            ReferenceCode = "VBW93",
                            Seat = "09D",
                            StartPoint = "Oslo S",
                            TicketHolderId = new Guid("dcc5e755-35f9-4b7c-b17a-53823509293c"),
                            Type = "Honnør"
                        },
                        new
                        {
                            Id = new Guid("b8437d05-414e-44b8-a470-7aefc4de10ba"),
                            EndPoint = "Gol",
                            OrderId = new Guid("41e00ed5-bdd0-49b1-bb4c-640a9c0c59ae"),
                            Price = 320m,
                            ReferenceCode = "VNQ92",
                            Seat = "09E",
                            StartPoint = "Skøyen",
                            TicketHolderId = new Guid("ff8754e4-3cff-43a0-8301-245028613ad4"),
                            Type = "Student"
                        },
                        new
                        {
                            Id = new Guid("a487e1cc-77bd-4bea-9a00-a17391821779"),
                            EndPoint = "Gol",
                            OrderId = new Guid("41e00ed5-bdd0-49b1-bb4c-640a9c0c59ae"),
                            Price = 320m,
                            ReferenceCode = "VCS20",
                            Seat = "09C",
                            StartPoint = "Oslo S",
                            TicketHolderId = new Guid("e0eb2039-85b7-49a1-b20d-1ab15312ba11"),
                            Type = "Student"
                        },
                        new
                        {
                            Id = new Guid("a5de7f9d-b8f3-42de-828f-bee91b5b362f"),
                            EndPoint = "Oslo S",
                            OrderId = new Guid("8d580160-fe0c-469c-94c4-35f13c86a4e5"),
                            Price = 72m,
                            ReferenceCode = "ARQ42",
                            Seat = "13D",
                            StartPoint = "Kolbotn",
                            TicketHolderId = new Guid("eba9dcf6-a561-4817-a314-6bfce0c56888"),
                            Type = "Student"
                        });
                });

            modelBuilder.Entity("VyShare.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("281f253d-589e-45de-a54f-76fbc5c26706"),
                            IsActive = true,
                            Name = "Familietur til Grønnåsen 15.06.20"
                        },
                        new
                        {
                            Id = new Guid("2d2d8c65-7390-452a-b76e-aaf663ff3076"),
                            IsActive = true,
                            Name = "Fotballkamp"
                        },
                        new
                        {
                            Id = new Guid("41e00ed5-bdd0-49b1-bb4c-640a9c0c59ae"),
                            IsActive = false,
                            Name = "Skitur"
                        },
                        new
                        {
                            Id = new Guid("8d580160-fe0c-469c-94c4-35f13c86a4e5"),
                            IsActive = false,
                            Name = "Oslo 11.02.20"
                        });
                });

            modelBuilder.Entity("VyShare.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("VyShare.Models.Contact", b =>
                {
                    b.HasBaseType("VyShare.Models.Person");

                    b.HasDiscriminator().HasValue("Contact");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dcc5e755-35f9-4b7c-b17a-53823509293c"),
                            Email = "katofje@online.no",
                            FirstName = "Kato",
                            LastName = "Fjellberg",
                            PhoneNumber = "90125872"
                        },
                        new
                        {
                            Id = new Guid("e0eb2039-85b7-49a1-b20d-1ab15312ba11"),
                            Email = "kathi95@gmail.com",
                            FirstName = "Kathrine",
                            LastName = "Wesenlund",
                            PhoneNumber = "40912854"
                        },
                        new
                        {
                            Id = new Guid("eba9dcf6-a561-4817-a314-6bfce0c56888"),
                            Email = "kk@realitytv.com",
                            FirstName = "Kim",
                            LastName = "Kardashian",
                            PhoneNumber = "92304215"
                        },
                        new
                        {
                            Id = new Guid("ff8754e4-3cff-43a0-8301-245028613ad4"),
                            Email = "karefje@online.no",
                            FirstName = "Kåre",
                            LastName = "Fjellberg",
                            PhoneNumber = "90002390"
                        },
                        new
                        {
                            Id = new Guid("c593f031-a50e-4347-9776-32a99880ba3b"),
                            Email = "kennekennern51@outlook.com",
                            FirstName = "Kenneth",
                            LastName = "Kennesen",
                            PhoneNumber = "40534009"
                        });
                });

            modelBuilder.Entity("VyShare.Models.User", b =>
                {
                    b.HasBaseType("VyShare.Models.Person");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2efde4fb-f278-461a-a938-dab1c86d22a6"),
                            Email = "popokatepetl@online.no",
                            FirstName = "Pål",
                            LastName = "Fjellberg",
                            PhoneNumber = "90035412",
                            Username = "popokatepetl"
                        },
                        new
                        {
                            Id = new Guid("4289cfb5-ef1f-41f4-944e-476bab860d2c"),
                            Email = "marmelade86@gmail.com",
                            FirstName = "Mia",
                            LastName = "Mikkelsen",
                            PhoneNumber = "45612039",
                            Username = "marmelade86"
                        });
                });

            modelBuilder.Entity("VyShare.Models.BasicTicket", b =>
                {
                    b.HasOne("VyShare.Models.Order", null)
                        .WithMany("BasicTickets")
                        .HasForeignKey("OrderId");

                    b.HasOne("VyShare.Models.Person", "TicketHolder")
                        .WithMany()
                        .HasForeignKey("TicketHolderId");
                });

            modelBuilder.Entity("VyShare.Models.Order", b =>
                {
                    b.HasOne("VyShare.Models.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
